// ============ helpers ============

const STORAGE_KEYS = {
  managers: "pmVisibility",
  spoiler: "pmSpoilerOpen",
};

const DEFAULT_MANAGERS = { npm: true, yarn: true, pnpm: true, bun: true };

const isTypesPackage = () => document.title.includes("@types");
let isDevDependency = isTypesPackage();

let nodeMap = /** @type {Record<'npm'|'yarn'|'pnpm'|'bun', HTMLElement|null>} */ ({
  npm: null,
  yarn: null,
  pnpm: null,
  bun: null,
});

let visibility = loadManagersVisibility();
let spoilerOpen = loadSpoilerState();

function loadManagersVisibility() {
  try {
    const raw = localStorage.getItem(STORAGE_KEYS.managers);
    if (!raw) return { ...DEFAULT_MANAGERS };
    const parsed = JSON.parse(raw);
    return { ...DEFAULT_MANAGERS, ...parsed };
  } catch {
    return { ...DEFAULT_MANAGERS };
  }
}

function saveManagersVisibility(v) {
  localStorage.setItem(STORAGE_KEYS.managers, JSON.stringify(v));
}

function loadSpoilerState() {
  try {
    const raw = localStorage.getItem(STORAGE_KEYS.spoiler);
    if (raw === null) return false;
    return raw === "true";
  } catch {
    return false;
  }
}

function saveSpoilerState(open) {
  localStorage.setItem(STORAGE_KEYS.spoiler, String(open));
}

const findNpmNode = () =>
  document.querySelector('button[aria-label="Copy install command line"]')
    ?.parentNode?.parentNode;

const createSiblingNode = (originalNode) =>
  originalNode.parentNode.insertBefore(originalNode.cloneNode(true), originalNode);

function addCopyOnClick(node) {
  const copyButton = node.querySelector("button");
  const codeNode = node.querySelector("code");
  if (!copyButton || !codeNode) return;

  // –ß—Ç–æ–±—ã –Ω–µ –Ω–∞–≤–µ—à–∏–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
  if (copyButton.__copyHandlerAttached) return;
  copyButton.__copyHandlerAttached = true;

  copyButton.addEventListener("click", () => {
    const text = codeNode.innerText;
    navigator.clipboard.writeText(text);
    const prev = codeNode.innerText;
    codeNode.innerHTML = "Copied! ‚úÖ";
    setTimeout(() => (codeNode.innerText = prev), 1000);
  });
}

// –û—á–∏—Å—Ç–∏—Ç—å –ª—é–±—ã–µ dev-—Ñ–ª–∞–≥–∏
function stripDevFlags(text) {
  return text
    .replace(/(?:^|\s)--save-dev\b/g, "")
    .replace(/(?:^|\s)--dev\b/g, "")
    .replace(/(?:^|\s)-D\b/g, "")
    .replace(/(?:^|\s)-d\b/g, "")
    .replace(/\s{2,}/g, " ") // –ø–æ–¥—á–∏—Å—Ç–∏–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    .trim();
}

// –ü—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∫ –Ω—É–∂–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ dev-—Å–æ—Å—Ç–æ—è–Ω–∏—é
function buildCommand(originalText, manager, isDev) {
  let text = originalText;

  // 1) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —à–∞–ø–∫—É –∫–æ–º–∞–Ω–¥—ã (–º–µ–Ω–µ–¥–∂–µ—Ä + –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞)
  // –ú–µ–Ω—è–µ–º "xxx i|install|add" –Ω–∞ "<manager> i/add"
  const header = manager === "npm" ? "npm i" : `${manager} add`;
  text = text.replace(
    /^(?:\s*)(npm|yarn|pnpm|bun)\s+(?:i|install|add)\b/i,
    header
  );

  // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —Å–æ–≤–ø–∞–ª–æ (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π) ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ñ–∏–∫—Å—É–µ–º
  if (!/^(npm i|yarn add|pnpm add|bun add)\b/i.test(text)) {
    // –∑–∞–±–∏—Ä–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞+–∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    const pkgPart = text.replace(/^(?:\s*)(npm|yarn|pnpm|bun)\b.*/i, "").trim();
    text = `${header}${pkgPart ? " " + pkgPart : ""}`;
  }

  // 2) –û—á–∏—â–∞–µ–º dev-—Ñ–ª–∞–≥–∏
  text = stripDevFlags(text);

  // 3) –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π dev-—Ñ–ª–∞–≥
  if (isDev) {
    const flag =
      manager === "npm"
        ? "--save-dev"
        : manager === "yarn"
        ? "--dev"
        : manager === "pnpm"
        ? "-D"
        : "-d"; // bun
    text = text.replace(/^(npm i|yarn add|pnpm add|bun add)\b/i, `$1 ${flag}`);
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
  return text.replace(/\s{2,}/g, " ").trim();
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —É–∑–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
function recreateNode(node) {
  if (!node) return node;
  const code = node.querySelector("code");
  if (!code) return node;

  const m = code.innerText.match(/^(npm|yarn|pnpm|bun)\b/i);
  const pm = m ? m[1].toLowerCase() : "npm";
  code.innerText = buildCommand(code.innerText, pm, isDevDependency);
  return node;
}

function recreateAllNodes() {
  Object.values(nodeMap).forEach((node) => node && recreateNode(node));
}

// ============ creation of PM nodes ============

function createPMNodeFrom(originalNode, manager) {
  const newNode = createSiblingNode(originalNode);
  if (!newNode) return null;
  const code = newNode.querySelector("code");
  if (!code) return null;

  // –ü–æ—Å—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  code.innerText = buildCommand(code.innerText, manager, isDevDependency);

  addCopyOnClick(newNode);
  // –ü–æ–º–µ—Ç–∏–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  newNode.dataset.pm = manager;
  newNode.style.margin = "6px 0";
  return newNode;
}

function replaceNpmWithNormalized(npmNode) {
  const newNode = createSiblingNode(npmNode);
  if (!newNode) return null;

  const code = newNode.querySelector("code");
  if (!code) return null;

  code.innerText = buildCommand(code.innerText, "npm", isDevDependency);
  addCopyOnClick(newNode);

  newNode.dataset.pm = "npm";
  newNode.style.margin = "6px 0";
  npmNode.remove();
  return newNode;
}

// ============ UI ============

function addDevCheckbox(anchorNode) {
  const wrap = document.createElement("div");
  wrap.style.color = "rgba(0,0,0,.8)";
  wrap.style.fontFamily = "'Fira Mono','Andale Mono','Consolas',monospace";
  wrap.style.fontSize = ".875rem";
  wrap.style.margin = "4px 0 8px 0";
  wrap.style.display = "flex";
  wrap.style.alignItems = "center";
  wrap.style.gap = "8px";

  const label = document.createElement("label");
  label.textContent = "üì¶ dev dependency";

  const cb = document.createElement("input");
  cb.type = "checkbox";
  cb.checked = isDevDependency;
  cb.style.verticalAlign = "middle";
  cb.addEventListener("change", (e) => {
    isDevDependency = e.target.checked; // –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    recreateAllNodes(); // –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  });

  label.prepend(cb);
  wrap.appendChild(label);

  anchorNode.parentNode.insertBefore(wrap, anchorNode);
  return wrap;
}

function applyVisibility() {
  Object.entries(nodeMap).forEach(([pm, node]) => {
    if (!node) return;
    node.style.display = visibility[pm] ? "" : "none";
  });
}

function addManagersSpoiler(afterNode) {
  const details = document.createElement("details");
  details.open = !!spoilerOpen;

  const summary = document.createElement("summary");
  summary.textContent = "‚öôÔ∏è Package Managers";
  summary.style.cursor = "pointer";
  summary.style.margin = "6px 0";
  details.appendChild(summary);

  const body = document.createElement("div");
  body.style.padding = "6px 0 0 0";
  body.style.display = "flex";
  body.style.flexDirection = "column";
  body.style.gap = "6px";

  const checklist = document.createElement("div");
  checklist.style.display = "grid";
  checklist.style.gridTemplateColumns = "repeat(2, max-content)";
  checklist.style.gap = "6px 16px";

  ["npm", "yarn", "pnpm", "bun"].forEach((pm) => {
    const label = document.createElement("label");
    label.style.userSelect = "none";
    const input = document.createElement("input");
    input.type = "checkbox";
    input.checked = !!visibility[pm];
    input.addEventListener("change", () => {
      visibility[pm] = input.checked;
      saveManagersVisibility(visibility);
      applyVisibility(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É, –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    });
    label.appendChild(input);
    label.append(" " + pm);
    checklist.appendChild(label);
  });

  const resetBtn = document.createElement("button");
  resetBtn.textContent = "Reset to defaults";
  resetBtn.style.width = "fit-content";
  resetBtn.addEventListener("click", () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–æ–π–ª–µ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ reload
    saveSpoilerState(details.open);
    // –°–±—Ä–æ—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫ –¥–µ—Ñ–æ–ª—Ç—É
    visibility = { ...DEFAULT_MANAGERS };
    saveManagersVisibility(visibility);
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
    location.reload();
  });

  details.addEventListener("toggle", () => {
    saveSpoilerState(details.open);
  });

  body.appendChild(checklist);
  body.appendChild(resetBtn);
  details.appendChild(body);

  afterNode.parentNode.insertBefore(details, afterNode.nextSibling);
  return details;
}

// ============ bootstrap ============

setTimeout(() => {
  const baseNpmNode = findNpmNode();
  if (!baseNpmNode) return;

  // –°–æ–∑–¥–∞—ë–º —É–∑–ª—ã –ø–æ–¥ –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
  const yarnNode = createPMNodeFrom(baseNpmNode, "yarn");
  const pnpmNode = createPMNodeFrom(baseNpmNode, "pnpm");
  const bunNode = createPMNodeFrom(baseNpmNode, "bun");
  const npmNode = replaceNpmWithNormalized(baseNpmNode);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
  nodeMap = {
    npm: npmNode,
    yarn: yarnNode,
    pnpm: pnpmNode,
    bun: bunNode,
  };

  // –í—Å—Ç–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å Dev –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º
  const firstVisibleNode =
    yarnNode || pnpmNode || bunNode || npmNode || baseNpmNode;
  if (firstVisibleNode) addDevCheckbox(firstVisibleNode);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
  applyVisibility();

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ–π–ª–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  const lastNode = npmNode || bunNode || pnpmNode || yarnNode;
  if (lastNode) addManagersSpoiler(lastNode);
}, 100);
